#version 400 core

layout(location = 0)in vec3 position;
layout(location = 1)in vec3 normal;
layout(location = 2)in vec3 texCoord;
layout(location = 3)in vec3 tangent;

uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;

#define PI 3.14159265


out VS_OUT {
  vec2 fragTexCoord;
  vec3 fragPos;  //in World space coordinate system
  vec3 fragNormal;
  mat3 TBN;
} vs_out;


float scale = (model * vec4(1.0f)).x;
uniform float time;
uniform float wavefront_radius;

vec2 ripple = vec2(10.0, 0.0);


void create_ripple(vec2 origin, float amplitude, float wavelength, float frequency);

uniform vec3 camPos;
uniform int count;


void main(){

  gl_Position = model * vec4(position, 1.0f);

  float modified_time;
  int size = int(sqrt(count));

  gl_Position.z -= (gl_InstanceID / size) * 1.955*scale;
  gl_Position.x -= (gl_InstanceID % size) * 1.955*scale;

  float amp = 100 - 0.001*length(camPos - gl_Position.xyz);
  modified_time = 1.5*sin(amp/1000*time);

 // gl_Position.y += amp*(sin((10/scale)*gl_Position.x*modified_time)+cos((10/scale)*gl_Position.z*modified_time));
  
 // create_ripple(ripple, 100, 400*PI, 30/PI);

  vs_out.fragPos = gl_Position.xyz;
  vs_out.fragNormal = mat3(transpose(inverse(model))) * normal;
  //vs_out.fragTexCoord = 0.05*vec2((sin(time)), cos(time)) + vec2(texCoord.x, texCoord.y);
  vs_out.fragTexCoord = vec2(texCoord.x, texCoord.y)*50;
  gl_Position = projection * view * gl_Position; 

  vec3 T = normalize(vec3(model * vec4(tangent,   0.0)));
  vec3 N = normalize(vec3(model * vec4(normal,    0.0)));

  T = normalize(T - dot(T, N) * N);
  // then retrieve perpendicular vector B with the cross product of T and N
  vec3 B = cross(T, N);
  
  vs_out.TBN = mat3(T, B, N);
}


void create_ripple(vec2 origin, float amplitude, float wavelength, float frequency){

  float distance = sqrt(pow((gl_Position.x - ripple.x), 2)+pow((gl_Position.z - ripple.y), 2))+500;
  //float decay = scale * pow(time+0.1, 4);
  //amplitude = 1000/(distance * 100*time);

  //if(distance < decay){
  //  distance = scale;
  //  amplitude *= 1/10*distance;
  //}


  vec2 wave_vector = normalize(origin - gl_Position.xz);
  float offset_y = 0;
  if(distance <= (2*wavefront_radius) && distance >= (2*wavefront_radius-5000)){
    offset_y = -(amplitude*scale/distance)*cos((2*PI/wavelength)*dot(wave_vector, gl_Position.xz)+2*PI*frequency*time);  
  }
  

  if(offset_y > amplitude){
    offset_y = amplitude;
    offset_y += 10*scale/distance;

  }
  else if(offset_y < -1.5*amplitude){
    offset_y = -amplitude;
      offset_y -= 10*scale/distance;

  }
  
  
  gl_Position.y += offset_y;


}
